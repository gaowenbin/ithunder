#ifndef _BASE64_HTML_H
#define _BASE64_HTML_H
static const char *html_code_base64 = "<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <title>检索节点</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <style>
        body.IE_M7, body.IE_M8, body.Win6{font-family:"Segoe UI", Tahoma, Verdana, Arial;}
        body.Safari{min-width:987px;}
        body.SF_iPhone{-webkit-text-size-adjust:none;}
        body
        {
            margin:0;font-family:Tahoma, Verdana, Arial;
            background-color:#FEFEFE;
            color:#333;
            font-size:12pt;
            width:100%;
            height:100%;
        }
        #mainframe{position:relative;background-color:#FEFEFE;width:100%;height:100%;}
        #resinfo{position:relative;background-color:#FEFEFE;width:100%;height:100%;}
        #records{position:relative;background-color:#FEFEFE;width:100%;height:700px;}
        #page{position:relative;background-color:#FEFEFE;width:100%;height:100%;}
        .xxxtitle{position:relative;background-color:#2F5FA1;color:#c0c0c0; height:30px;}
        .xheader{position:relative;background-color:#2F5FA1;color:#c0c0c0; height:30px;}
        </style>
        <script language='javascript'>
            var idisplay = "display=0$,1$,2$,3,4,5,6,7,8,9";
            var base64EncodeChars = 
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            var base64DecodeChars = new Array(
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
            -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
            -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);
            function base64encode(str) 
            {
                var out, i, len;
                var c1, c2, c3;

                len = str.length;
                i = 0;
                out = "";
                while(i < len) {
                    c1 = str.charCodeAt(i++) & 0xff;
                    if(i == len)
                    {
                        out += base64EncodeChars.charAt(c1 >> 2);
                        out += base64EncodeChars.charAt((c1 & 0x3) << 4);
                        out += "==";
                        break;
                    }
                    c2 = str.charCodeAt(i++);
                    if(i == len)
                    {
                        out += base64EncodeChars.charAt(c1 >> 2);
                        out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));
                        out += base64EncodeChars.charAt((c2 & 0xF) << 2);
                        out += "=";
                        break;
                    }
                    c3 = str.charCodeAt(i++);
                    out += base64EncodeChars.charAt(c1 >> 2);
                    out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));
                    out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6));
                    out += base64EncodeChars.charAt(c3 & 0x3F);
                }
                return out;
            }
            function base64decode(str)
            {
                var c1, c2, c3, c4;
                var i, len, out;

                len = str.length;
                i = 0;
                out = "";
                while(i < len) {
                    /* c1 */
                    do {
                        c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
                    } while(i < len && c1 == -1);
                    if(c1 == -1)
                    break;

                    /* c2 */
                    do {
                        c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
                    } while(i < len && c2 == -1);
                    if(c2 == -1)
                    break;

                    out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));

                    /* c3 */
                    do {
                        c3 = str.charCodeAt(i++) & 0xff;
                        if(c3 == 61)
                        return out;
                        c3 = base64DecodeChars[c3];
                    } while(i < len && c3 == -1);
                    if(c3 == -1)
                    break;

                    out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));

                    /* c4 */
                    do {
                        c4 = str.charCodeAt(i++) & 0xff;
                        if(c4 == 61)
                        return out;
                        c4 = base64DecodeChars[c4];
                    } while(i < len && c4 == -1);
                    if(c4 == -1)
                    break;
                    out += String.fromCharCode(((c3 & 0x03) << 6) | c4);
                }
                return out;
            }
            function utf16to8(str)
            {
                var out, i, len, c;
                out = "";
                len = str.length;
                for(i = 0; i < len; i++) {
                    c = str.charCodeAt(i);
                    if ((c >= 0x0001) && (c <= 0x007F)) {
                        out += str.charAt(i);
                        } else if (c > 0x07FF) {
                        out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));
                        out += String.fromCharCode(0x80 | ((c >>  6) & 0x3F));
                        out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));
                        } else {
                        out += String.fromCharCode(0xC0 | ((c >>  6) & 0x1F));
                        out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));
                    }
                }
                return out;
            }
            function utf8to16(str)
            {
                var out, i, len, c;
                var char2, char3;
                out = "";
                len = str.length;
                i = 0;
                while(i < len) {
                    c = str.charCodeAt(i++);
                    switch(c >> 4)
                    { 
                        case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
                        // 0xxxxxxx
                        out += str.charAt(i-1);
                        break;
                        case 12: case 13:
                        // 110x xxxx   10xx xxxx
                        char2 = str.charCodeAt(i++);
                        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                        break;
                        case 14:
                        // 1110 xxxx  10xx xxxx  10xx xxxx
                        char2 = str.charCodeAt(i++);
                        char3 = str.charCodeAt(i++);
                        out += String.fromCharCode(((c & 0x0F) << 12) |
                        ((char2 & 0x3F) << 6) |
                        ((char3 & 0x3F) << 0));
                        break;
                    }
                }

                return out;
            }
            function start_wait()
            {
                document.body.style.cursor = 'wait';
            }
            function over_wait()
            {
                document.body.style.cursor = 'auto';
            }
            function base64strdecode(str)
            {
                return utf8to16(base64decode(str));
            }
            function trim(str)
            {
                return str.replace(/(^\s+|\s+$)/, "");
            }
            function highlight(obj)
            {
                obj.className = "btitle";
            }
            function backcss(obj)
            {
                obj.className = "title";
            }
            function removeElement(_element)
            {
                var _parentElement = _element.parentNode;
                if(_parentElement)
                {
                    _parentElement.removeChild(_element);  
                }
                return hideBFrame();
            }
            function CreateXMLHTTP()
            {
                var xmlhttp = null;
                xmlhttpObj = ["MSXML2.XmlHttp.5.0","MSXML2.XmlHttp.4.0",
                "MSXML2.XmlHttp.3.0","MSXML2.XmlHttp","Microsoft.XmlHttp"];
                if(window.XMLHttpRequest)
                {
                    xmlhttp = new XMLHttpRequest();
                }
                else if(window.ActiveXObject)
                {
                    for(i=0;i<xmlhttpObj.length;i++)    
                    {
                        try{xmlhttp = new ActiveXObject(xmlhttpObj[i]);break;}
                        catch(e){xmlhttp = null;}
                    }
                }
                else 
                {
                    alert('Can not create XMLHTTP Object');
                }
                return xmlhttp;
            }
            //hide result
            function hideresult()
            {
                obj = document.getElementById('resinfo');
                obj.innerHTML = "";
                obj = document.getElementById('records');
                obj.innerHTML = "";
                obj = document.getElementById('page');
                obj.innerHTML = "";
                obj = document.getElementById('pagetop');
                obj.innerHTML = "";
            }
            function isoDateTime(time)
            {
                var datetime = new Date(time * 1000);
                var year = datetime.getFullYear();
                var mon = datetime.getMonth()+1;if(parseInt(mon) < 10) mon = "0"+mon;
                var day = datetime.getDate();if(parseInt(day) < 10) day = "0"+day;
                var hour = datetime.getHours();if(parseInt(hour) < 10) hour = "0"+hour;
                var min = datetime.getMinutes();if(parseInt(min) < 10) min = "0"+min;
                var sec = datetime.getSeconds();if(parseInt(sec) < 10) sec = "0"+sec;
                return year+"-"+mon+"-"+day+" "+hour+":"+min+":"+sec;
            }
            //display
            function display(text, page)
            {
                var catlist = ["娱乐","乐活","搞笑", "动画","游戏","音乐","体育","科技",
                    "电影","财富","教育","汽车","女性","热点","电视剧","原创", "综艺","风尚",
                    "健康","美容","","","","屏蔽","480P",
                    "360P", "250P", "视频", "音频", "其他", "720P", "加密", "原画质"];
                var html = "";
                var res = null;
                var catgroups = null;
                var opage = document.getElementById('page');
                var opagetop = document.getElementById('pagetop');
                var orecords = document.getElementById('records');
                var oresinfo = document.getElementById('resinfo');
                var comments = "";
                var records = null;
                var i = 0, from = 0, to = 0, page_count = 0, catid = 0;

                if((res = eval(text)))
                {
                    //alert(text);
                    if(window.location.href.indexOf('displayres=1') >= 0)alert(text);
                    html = "";
                    html += "结果:<span class='highlight'>"+res['count']+"</span>"; 
                    html += "&nbsp;&nbsp;";
                    html += "命中:<span class='highlight'>"+res['total']+"</span>"; 
                    html += "&nbsp;&nbsp;";
                    html += "IO时间:<span class='highlight'>"+res['io']+"</span>"; 
                    html += "&nbsp;&nbsp;";
                    html += "排序时间:<span class='highlight'>"+res['sort']+"</span>"; 
                    html += "&nbsp;&nbsp;";
                    html += "总文档数:<span class='highlight'>"+res['doctotal']+"</span>"; 
                    html += "&nbsp;&nbsp;";
                    if((catgroups = res['catgroups']))
                    {
                        for(x in catgroups)
                        {
                            html += catlist[x]+"[<font color=red >"+catgroups[x]+"</font>]";
                            html += "&nbsp;&nbsp;";
                        }
                    }
                    html += "&nbsp;&nbsp;<hr><br>";
                    oresinfo.innerHTML = html;
                    /* show records */
                    if(res['count'] > 0 && (records = res['records']))
                    {
                        html = "<div style='border:1px;border-color:#000000;'>";
                        html += "<table align=left wdith=100% >";
                        var reply_num = 0, view_num = 0;
                        var title = "", content = "", author = "", url = "";
                        for (x in records)
                        {
                            title = records[x]['summary']['0'] ;
                            content = records[x]['summary']['1'] ;
                            author = records[x]['summary']['2'] ;
                            view_num = records[x]['summary']['3'] ;
                            reply_num = records[x]['summary']['4'] ;
                            datetime = isoDateTime(records[x]['summary']['5']);
                            url = records[x]['summary']['6'] ;
                            author_url = records[x]['summary']['7'] ;
                            forum_name = records[x]['summary']['8'] ;
                            forum_url = records[x]['summary']['9'] ;
                            html += "<tr ><td width=100% >";
                            html += "<a href='"+url+"' target='_blank'>"+title+"</a>&nbsp;";
                            html += "发帖[<a href='"+author_url+"' target='_blank'>"+author+"</a>]";
                            html += "&nbsp;";
                            html += "回复["+reply_num+"/"+view_num+"]";
                            html += "&nbsp;";
                            html += "["+datetime+"]";
                            html += "<hr>";
                            html += content;
                            html += "<br><br>";
                            html += "</td></tr>";
                        }
                        html += "</table></div>"
                        orecords.innerHTML = html;
                    }
                    /* paging */
                    if((total = 1 * res['total']) > 15)
                    {
                        page_count = parseInt(total/15);
                        if(total%15) page_count++;
                        from = page - 10;
                        to = page + 10;
                        if(from < 1) from = 1;
                        if(to > page_count) to = page_count;
                        html = "";
                        if(page > 15)
                            html += "<a href='javascript:so(1)'>1</a>  ...  ";
                        for(i = from; i <= to; i++)
                        {
                            if(i == page)
                                html += i;
                            else
                                html += "<a href='javascript:so("+i+")'>"+i+"</a>";
                            html += "&nbsp;&nbsp;";
                        }
                        if(page < (page_count - 15))
                        html += " ...   总页数:"+page_count;
                        opagetop.innerHTML = html+"<hr><br>";
                        opage.innerHTML = "<br>"+html;
                    }
                }
                else alert("没有找到相关的结果");
            }
            //so
            function so(page)
            {
                var xmlHttp = null;
                var query = "";
                var page_num = page;
                var form = document.forms['search'];
                var fieldsfilter = 0;
                var n = 0;
                var from = 0;
                var count = 15;
                var catfilter = "";
                var multicat = "";
                var catblock = "";
                var catgroup = "";
                var rangefilter = "";
                var xup = "";
                var xdown = "";
                var orderby = 0;
                var order = 0;
                var datetime = null;
                var datefrom = 0;
                var dateto = 0;
                if((form && (query = form['query'].value) != "")
                    && (xmlHttp = CreateXMLHTTP()) != null)
                {
                    if(page <= 0) page_num = 1;
                    from = (page_num - 1) * 15;
                    hideresult();
                    var uri = "/s?";
                    var not_str = "";
                    uri += idisplay;
                    uri += "&hitscale=";
                    var i = 0;
                    for(i = 1; i <= 32; i++)
                    {
                        form['h'+i].value;
                        if(i < 32)uri += form['h'+i].value+",";
                        else uri += form['h'+i].value;
                    }
                    var slevel_str = "";
                    for(i = 0; i < 256; i++)
                    {
                        if(form['s'+i] && form['s'+i].checked == true)
                        {
                            slevel_str += form['s'+i].value+",";
                        }
                    }
                    if(slevel_str.length > 0) 
                        uri += "&slevel="+slevel_str.substring(0, slevel_str.length-1);
                    if((order = form['order'].value) != 0)
                        uri += "&order="+order;
                    if(form['qweight'].checked == true)
                        uri += "&qweight=1";
                    if(form['phrase'].checked == true)
                        uri += "&phrase=1";
                    if(form['rank'].checked == true)
                        uri += "&rank=1";
                    if(form['rel'].checked) uri += "&rel=1";
                    if(form['qfunc'][0].checked) uri += "&qfunc=1";
                    else if(form['qfunc'][1].checked) uri += "&qfunc=2";
                    var qfhits = 0;
                    if(form['t0'] && form['t0'].checked) qfhits = 1;
                    if(form['t1'] && form['t1'].checked) qfhits |= 1 << 1;
                    if(form['t2'] && form['t2'].checked) qfhits |= 1 << 2;
                    uri += "&qfhits="+qfhits;
                    if(form['booland'].checked == true) uri += "&booland=1";
                    uri += "&bhits="+form['bhits'].value;
                    uri += "&bfhits="+form['bfhits'].value;
                    uri += "&bphrase="+form['bphrase'].value;
                    uri += "&bnterm="+form['bnterm'].value;
                    uri += "&bxcatup="+form['bxcatup'].value;
                    uri += "&bxcatdown="+form['bxcatdown'].value;
                    uri += "&brank="+form['brank'].value;
                    uri += "&query="+encodeURI(query);
                    if((not_str = form['not_str'].value))
                        uri += "&not="+encodeURI(not_str);
                    if((fieldsfilter = form['fieldsfilter'].value) > 0)
                        uri += "&fieldsfilter="+fieldsfilter;
                    if(form['catlist'] && (n = form['catlist'].value) >= 0)
                        multicat += n + ",";
                    if(form['block'] && form['block'].checked == true)
                        multicat += form['block'].value + ",";
                    /*
                    if(form['times'] && (n = form['times'].value) >= 0) 
                        multicat += n + ",";
                    if(form['h264'] && (n = form['h264'].value) >= 0) 
                        multicat += n + ",";
                    */
                    if(form['orderby'] && (orderby = form['orderby'].value) > 0)
                        uri += "&orderby="+orderby;
                    for(i = 0; i < 64; i++)
                    {
                        if(form['g'+i] && form['g'+i].checked == true) 
                            catgroup += i + ",";
                        if(form['b'+i] && form['b'+i].checked == true) 
                            catblock += i + ",";
                        if(form['f'+i] && form['f'+i].checked == true) 
                            catfilter += i + ",";
                        if(form['x'+i])
                        {
                            if(form['x'+i][0].checked == true)
                                xup += i + ",";
                            else if(form['x'+i][1].checked == true)
                                xdown += i + ",";
                        }
                    }
                    if(form['datefrom'] && form['dateto'])
                    {
                        if((form['datefrom'].value) || (form['dateto'].value))
                        {
                            var dstr = "";
                            var dlist = new Array();
                            if((dstr = form['datefrom'].value) && (dlist = dstr.split("-")))
                            {
                                datetime = new Date(dlist[0], dlist[1]-1, dlist[2]); 
                                datefrom =  datetime.getTime()/1000;
                            }
                            if((dstr = form['dateto'].value) && (dlist = dstr.split("-")))
                            {
                                datetime = new Date(dlist[0], dlist[1]-1, dlist[2]); 
                                dateto =  datetime.getTime()/1000;
                            }
                            if(dateto && dateto < datefrom) 
                            {
                                alert("时间范围不规范,终止时间必须大于起始时间");
                                return ;
                            }
                            rangefilter += "9:["+datefrom+","+dateto+"],";
                        }
                    }
                    /*
                    var userid = 0, itemid = 0;
                    if(form['userid'] && (userid = form['userid'].value) > 0) 
                    {
                        rangefilter += "10:["+userid+","+userid+"],";
                    }
                    if(form['itemid'] && (itemid = form['itemid'].value) > 0) 
                    {
                        rangefilter += "9:["+itemid+","+itemid+"],";
                    }
                    */
                    if(rangefilter) uri += "&rangefilter="+rangefilter.substring(0, rangefilter.length-1);
                    if(catfilter) uri += "&catfilter="+catfilter.substring(0, catfilter.length-1);
                    if(multicat) uri += "&multicat="+multicat.substring(0, multicat.length-1);
                    if(catgroup) uri += "&catgroup="+catgroup.substring(0, catgroup.length-1);
                    if(catblock) uri += "&catblock="+catblock.substring(0, catblock.length-1);
                    if(xup) uri += "&xup="+xup.substring(0, xup.length-1);
                    if(xdown) uri += "&xdown="+xdown.substring(0, xdown.length-1);
                    uri += "&from="+from+"&count=15";
                    xmlHttp.open('GET', uri, true);
                    if(window.location.href.indexOf('displayuri=1') >= 0)alert(uri);
                    //xmlHttp.setRequestHeader("Content-Length", uri.length);
                    //xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    xmlHttp.onreadystatechange=function()
                    {
                        if(xmlHttp.readyState==4)
                        {
                            if(xmlHttp.status == 200)
                            {
                                display(xmlHttp.responseText, page_num);
                            }
                            else
                                alert(xmlHttp.getAllResponseHeaders());

                        }
                    }
                    xmlHttp.send();
                }else alert("请输入关键词");
            }
            function clear_cache(obj)
            {
                var xmlhttp = null;
                var uri = "op=1";
                if((xmlHttp = CreateXMLHTTP()) != null)
                {
                    obj.disabled = true;
                    xmlHttp.open('POST', "/", true);
                    xmlHttp.setRequestHeader("Content-Length", uri.length);
                    xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    xmlHttp.onreadystatechange=function()
                    {
                        if(xmlHttp.readyState==4)
                        {
                            if(xmlHttp.status == 200)
                            {
                                alert("操作成功!");
                                obj.disabled = false;
                            }
                        }
                    }
                    xmlHttp.send(uri);
                }
                else alert("请求失败!");
            }
        </script>
    </head>
    <!-- <body onload='javascript:loadInit();'> -->
<body align=center >
  <div id='mainframe'>
  <table align=center width=100% > 
    <tr>
        <td align=center class='xheader'><font size=40 color=orange >搜索</font>
        </td>
    </tr>
    <tr>
        <form name=search action='javascript:void(0)' onsubmit="return so(1);">
        <td align=left class='xxxtitle'>
            命中控制:
                1:<input type=text name=h1 value='0' size=1>
                2:<input type=text name=h2 value='50' size=1>
                3:<input type=text name=h3 value='50' size=1>
                4:<input type=text name=h4 value='50' size=1>
                5:<input type=text name=h5 value='50' size=1>
                6:<input type=text name=h6 value='50' size=1>
                7:<input type=text name=h7 value='50' size=1>
                8:<input type=text name=h8 value='50' size=1>
                9:<input type=text name=h9 value='60' size=1>
                10:<input type=text name=h10 value='60' size=1>
                11:<input type=text name=h11 value='60' size=1>
                12:<input type=text name=h12 value='60' size=1>
                13:<input type=text name=h13 value='60' size=1>
                14:<input type=text name=h14 value='60' size=1>
                15:<input type=text name=h15 value='60' size=1>
                16:<input type=text name=h16 value='60' size=1>
                17:<input type=text name=h17 value='70' size=1>
                18:<input type=text name=h18 value='70' size=1>
                <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                19:<input type=text name=h19 value='70' size=1>
                20:<input type=text name=h20 value='70' size=1>
                21:<input type=text name=h21 value='70' size=1>
                22:<input type=text name=h22 value='70' size=1>
                23:<input type=text name=h23 value='70' size=1>
                24:<input type=text name=h24 value='70' size=1>
                25:<input type=text name=h25 value='80' size=1>
                26:<input type=text name=h26 value='80' size=1>
                27:<input type=text name=h27 value='80' size=1>
                28:<input type=text name=h28 value='80' size=1>
                29:<input type=text name=h29 value='80' size=1>
                30:<input type=text name=h30 value='80' size=1>
                31:<input type=text name=h31 value='80' size=1>
                32:<input type=text name=h32 value='80' size=1>
                <hr>
                打分基数:
                命中基数:<input type=text value=1 size=1 name="bhits" >&nbsp;
                字段命中:<input type=text value=2 size=1 name="bfhits" >&nbsp;
                句子命中:<input type=text value=5 size=1 name="bphrase" >&nbsp;
                句子词长:<input type=text value=1 size=1 name="bnterm" >&nbsp;
                分类加权:<input type=text value=20 size=1 name="bxcatup" >&nbsp;
                分类降权:<input type=text value=200 size=1 name="bxcatdown" >&nbsp;
                rank基数:<input type=text value=1000000000 size=10 name="brank" >&nbsp;
                <hr>
                <input type=checkbox name='phrase' checked>句子检索
                &nbsp;&nbsp;
                <input type=checkbox name='block' value=23 >屏蔽违禁词
                &nbsp;&nbsp;
                <input type=checkbox name='qweight' value=0 >无效词降权
                &nbsp;&nbsp;
                <input type=checkbox name='rank' checked>Rank
                &nbsp;&nbsp;<input type=checkbox name='rel' checked>计算相关性
                &nbsp;&nbsp;<input type=checkbox name='booland' >完全匹配

                命中加权:<input type=checkbox name='t0' checked>标题
                        <input type=checkbox name='t1'>内容
                        <input type=checkbox name='t2'>作者
                &nbsp;&nbsp;
                排序方法:
                &nbsp;<input type=radio name='qfunc' value='1' checked=true>binary
                &nbsp;<input type=radio name='qfunc' value='2'>xtree
                <input type=button name='clearcache' onclick="clear_cache(this)" value='清除检索CACHE'>
                <hr>
                <select name='catlist'>
                    <option value='-1' selected>选择分类</option>
                </select>
                &nbsp;&nbsp;
                <select name='fieldsfilter'>
                    <option value='-1' selected>选择字段</option>
                    <option value='1'>标题</option>
                    <option value='2'>内容</option>
                    <option value='4'>作者</option>
                </select>
                &nbsp;&nbsp;
                <select name='orderby'>
                    <option value='-1' selected>排序字段</option>
                    <option value='3'>浏览次数</option>
                    <option value='4'>回复次数</option>
                    <option value='5'>发帖时间</option>
                </select>
                <select name='order'>
                    <option value='-1' selected>降序</option>
                    <option value='1'>升序</option>
                </select>
                发帖时间:从<input type=text name=datefrom size=8 >&nbsp;到&nbsp;<input type=text name=dateto size=8 >(格式:2010-05-10)
                &nbsp;&nbsp;
                <hr>
                &nbsp;&nbsp;
                想查找:<input type=text name='query' size=48 >
                &nbsp;&nbsp;&nbsp;&nbsp;
                不包含:<input type=text name='not_str' size=16 >
                &nbsp;&nbsp;&nbsp;&nbsp;
                <input name=submit type=submit value='找'><br>
                <hr>
                
            </form>

        </td>
    </tr>
    <tr>
    <td><div id='resinfo' ></div></td>
    </tr>
    <tr>
    <tr>
    <td><div id='pagetop' ></div></td>
    </tr>
    <td><div id='records' ></div></td>
    </tr>
    <tr>
    <td><div id='page' ></div></td>
    </tr>
  </table>
  <div></div>
  </body>
</html>
";
#endif
